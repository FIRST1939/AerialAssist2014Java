// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1939.AerialAssist2014;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftFront;
    public static SpeedController drivetrainRightFront;
    public static SpeedController drivetrainLeftBack;
    public static SpeedController drivetrainRightBack;
    public static RobotDrive drivetrainRobotDrive;
    public static Encoder drivetrainLeftFrontEncoder;
    public static Encoder drivetrainLeftBackEncoder;
    public static Encoder drivetrainRightFrontEncoder;
    public static Encoder drivetrainRightBackEncoder;
    public static DoubleSolenoid armRightSolenoid;
    public static DoubleSolenoid armLeftSolenoid;
    public static SpeedController rollersMotor;
    public static Compressor compressor1Compressor;
    public static SpeedController wallsMotor;
    public static DigitalInput wallsInLimitSwitch;
    public static DigitalInput wallsOutLimitSwitch;
    public static DoubleSolenoid catapultRightSolenoid;
    public static DoubleSolenoid catapultLeftSolenoid;
    public static DigitalInput catapultLatchLimitSwitch;
    public static Relay catapultElectricSolenoid;
    public static Relay lightsSpikeOne;
    public static Relay lightsSpikeTwo;
    public static DigitalInput photoswitchBack;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftFront = new Talon(1, 1);
	LiveWindow.addActuator("Drivetrain", "LeftFront", (Talon) drivetrainLeftFront);
        
        drivetrainRightFront = new Talon(1, 2);
	LiveWindow.addActuator("Drivetrain", "RightFront", (Talon) drivetrainRightFront);
        
        drivetrainLeftBack = new Talon(1, 3);
	LiveWindow.addActuator("Drivetrain", "LeftBack", (Talon) drivetrainLeftBack);
        
        drivetrainRightBack = new Talon(1, 4);
	LiveWindow.addActuator("Drivetrain", "RightBack", (Talon) drivetrainRightBack);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftFront, drivetrainLeftBack,
              drivetrainRightFront, drivetrainRightBack);
	
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivetrainLeftFrontEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "LeftFrontEncoder", drivetrainLeftFrontEncoder);
        drivetrainLeftFrontEncoder.setDistancePerPulse(1.0);
        drivetrainLeftFrontEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainLeftFrontEncoder.start();
        drivetrainLeftBackEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "LeftBackEncoder", drivetrainLeftBackEncoder);
        drivetrainLeftBackEncoder.setDistancePerPulse(1.0);
        drivetrainLeftBackEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainLeftBackEncoder.start();
        drivetrainRightFrontEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "RightFrontEncoder", drivetrainRightFrontEncoder);
        drivetrainRightFrontEncoder.setDistancePerPulse(1.0);
        drivetrainRightFrontEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainRightFrontEncoder.start();
        drivetrainRightBackEncoder = new Encoder(1, 7, 1, 8, false, EncodingType.k4X);
	LiveWindow.addSensor("Drivetrain", "RightBackEncoder", drivetrainRightBackEncoder);
        drivetrainRightBackEncoder.setDistancePerPulse(1.0);
        drivetrainRightBackEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainRightBackEncoder.start();
        armRightSolenoid = new DoubleSolenoid(1, 1, 2);      
	
        
        armLeftSolenoid = new DoubleSolenoid(1, 3, 4);      
	
        
        rollersMotor = new Talon(1, 5);
	LiveWindow.addActuator("Rollers", "Motor", (Talon) rollersMotor);
        
        compressor1Compressor = new Compressor(1, 11, 1, 1);
	
        
        wallsMotor = new Talon(1, 6);
	LiveWindow.addActuator("Walls", "Motor", (Talon) wallsMotor);
        
        wallsInLimitSwitch = new DigitalInput(1, 12);
	LiveWindow.addSensor("Walls", "InLimitSwitch", wallsInLimitSwitch);
        
        wallsOutLimitSwitch = new DigitalInput(1, 13);
	LiveWindow.addSensor("Walls", "OutLimitSwitch", wallsOutLimitSwitch);
        
        catapultRightSolenoid = new DoubleSolenoid(1, 5, 6);      
	
        
        catapultLeftSolenoid = new DoubleSolenoid(1, 7, 8);      
	
        
        catapultLatchLimitSwitch = new DigitalInput(1, 14);
	LiveWindow.addSensor("Catapult", "LatchLimitSwitch", catapultLatchLimitSwitch);
        
        catapultElectricSolenoid = new Relay(1, 4);
	LiveWindow.addActuator("Catapult", "ElectricSolenoid", catapultElectricSolenoid);
        
        lightsSpikeOne = new Relay(1, 2);
	LiveWindow.addActuator("Lights", "SpikeOne", lightsSpikeOne);
        
        lightsSpikeTwo = new Relay(1, 3);
	LiveWindow.addActuator("Lights", "SpikeTwo", lightsSpikeTwo);
        
        photoswitchBack = new DigitalInput(1, 10);
	LiveWindow.addSensor("Photoswitch", "Back", photoswitchBack);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
