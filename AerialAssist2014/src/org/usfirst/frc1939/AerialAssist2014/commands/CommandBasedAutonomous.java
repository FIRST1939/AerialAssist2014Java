// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1939.AerialAssist2014.commands;
import com.sun.squawk.io.BufferedReader;
import com.sun.squawk.microedition.io.FileConnection;
import edu.wpi.first.wpilibj.command.Command;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.microedition.io.Connector;
/**
 *
 */
public class  CommandBasedAutonomous extends Command {
    public CommandBasedAutonomous() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        try {
            FileConnection fc = (FileConnection)Connector.open("file:///output.txt", Connector.WRITE);
            BufferedReader buf = new BufferedReader(new InputStreamReader(fc.openInputStream()));
            
            String line = "";
            while((line = buf.readLine()) != null){
                
                switch (line) {
                    case "turn":
                }
                
            }
            fc.close();
        } catch (IOException e) { 
            System.out.println("Couldn't Read File!");
        }
        
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
