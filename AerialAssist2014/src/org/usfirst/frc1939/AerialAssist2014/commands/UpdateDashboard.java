// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1939.AerialAssist2014.commands;

import com.sun.squawk.io.BufferedReader;
import com.sun.squawk.microedition.io.FileConnection;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.microedition.io.Connector;
import org.usfirst.frc1939.AerialAssist2014.Robot;

/**
 *
 */
public class  UpdateDashboard extends Command {

    private SendableChooser autoChooser;
    
    public UpdateDashboard(SendableChooser autoChooser) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.autoChooser = autoChooser;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        autoChooser.addDefault("Command Based: Default", "file:///autonomous.txt");
        for(int i = 1;i<8;i++){
            String location = "file:///autonomous" + i + ".txt";
            autoChooser.addObject("Command Based: " + i, location);
        }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        FileConnection fc;
        String msg = "Autonomous Selected: ";
        try {
            fc = (FileConnection)Connector.open((String) autoChooser.getSelected(), Connector.READ);
            if(!fc.exists()){
                msg = msg + "File doesn't exist!";
            }else{
                BufferedReader buf = new BufferedReader(new InputStreamReader(fc.openInputStream()));
                String line = buf.readLine();
                if(line == null || line.equalsIgnoreCase("")){
                    msg = msg + "Error reading first line of file!";
                }else{
                    msg = msg + line;
                }
            }
            fc.close();
        } catch (IOException ex) {
            msg = msg + "IOException";
        }
        SmartDashboard.putString("Autonmous Selected", msg);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
