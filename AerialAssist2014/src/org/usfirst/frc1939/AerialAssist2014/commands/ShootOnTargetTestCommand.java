// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1939.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.networktables2.type.NumberArray;
import edu.wpi.first.wpilibj.tables.TableKeyNotDefinedException;
import org.usfirst.frc1939.AerialAssist2014.Robot;
import org.usfirst.frc1939.AerialAssist2014.RobotMap;
/**
 *
 */
public class  ShootOnTargetTestCommand extends Command {
    NetworkTable server;
    Timer timer;
    int count;
    
    public ShootOnTargetTestCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        timer = new Timer();
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        System.out.println("Autonomous");
        server = NetworkTable.getTable("Camera");
        RobotMap.drivetrainRobotDrive.setSafetyEnabled(false);
        Robot.drivetrain.mecanumDriveXYZ(0, 5.0, 0);
        timer.delay(3.0);
        Robot.drivetrain.mecanumDriveXYZ(0, 0, 0);
        count = 0;
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(target() == 16){
            count++;
        }else{
            count = 0;
        }
        if(count > 10){
            Robot.arm.extend();
            timer.delay(2);
            Robot.arm.retract();
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        RobotMap.drivetrainRobotDrive.setSafetyEnabled(true);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        RobotMap.drivetrainRobotDrive.setSafetyEnabled(true);
    }
    
    private int target(){
        int number = 0;
        try
	{
		final NumberArray targetNum = new NumberArray();
		server.retrieveValue("BFR_COORDINATES", targetNum);
		System.out.println(targetNum.size());
                number = targetNum.size();
	}
	catch (TableKeyNotDefinedException exp)
	{
            System.out.println("Error");
	}
        return number;
    }
    
}
