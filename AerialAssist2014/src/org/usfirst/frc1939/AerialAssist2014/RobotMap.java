// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1939.AerialAssist2014;
    
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainleftFront;
    public static SpeedController drivetrainleftRear;
    public static SpeedController drivetrainrightFront;
    public static SpeedController drivetrainrightRear;
    public static RobotDrive drivetrainRobotDrive;
    public static AnalogChannel ultrasonicright;
    public static AnalogChannel ultrasonicleft;
    public static AnalogChannel ultrasonicfront;
    public static DigitalOutput ultrasonicoutput;
    public static DigitalInput photoswitchfront;
    public static DoubleSolenoid armsolenoid;
    public static SpeedController armmotor;
    public static Compressor compressor1compressor;
    public static SpeedController wallsmotor;
    public static AnalogChannel wallsangle;
    public static DoubleSolenoid catapultsolenoid;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainleftFront = new Talon(1, 1);
	LiveWindow.addActuator("Drivetrain", "leftFront", (Talon) drivetrainleftFront);
        
        drivetrainleftRear = new Talon(1, 3);
	LiveWindow.addActuator("Drivetrain", "leftRear", (Talon) drivetrainleftRear);
        
        drivetrainrightFront = new Talon(1, 2);
	LiveWindow.addActuator("Drivetrain", "rightFront", (Talon) drivetrainrightFront);
        
        drivetrainrightRear = new Talon(1, 4);
	LiveWindow.addActuator("Drivetrain", "rightRear", (Talon) drivetrainrightRear);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainleftFront, drivetrainleftRear,
              drivetrainrightFront, drivetrainrightRear);
	
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        ultrasonicright = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Ultrasonic", "right", ultrasonicright);
        
        ultrasonicleft = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Ultrasonic", "left", ultrasonicleft);
        
        ultrasonicfront = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Ultrasonic", "front", ultrasonicfront);
        
        ultrasonicoutput = new DigitalOutput(1, 13);
	
        
        photoswitchfront = new DigitalInput(1, 12);
	LiveWindow.addSensor("Photoswitch", "front", photoswitchfront);
        
        armsolenoid = new DoubleSolenoid(1, 3, 4);      
	
        
        armmotor = new Talon(1, 5);
	LiveWindow.addActuator("Arm", "motor", (Talon) armmotor);
        
        compressor1compressor = new Compressor(1, 10, 1, 1);
	
        
        wallsmotor = new Talon(1, 6);
	LiveWindow.addActuator("Walls", "motor", (Talon) wallsmotor);
        
        wallsangle = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Walls", "angle", wallsangle);
        
        catapultsolenoid = new DoubleSolenoid(1, 1, 2);      
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
    }
}
